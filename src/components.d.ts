/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CcInput {
    }
    interface CcLi {
    }
    interface CcModal {
        "isOpen": boolean;
    }
    interface CcTooltip {
        "text": string;
    }
    interface CcUl {
    }
}
export interface CcModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCcModalElement;
}
declare global {
    interface HTMLCcInputElement extends Components.CcInput, HTMLStencilElement {
    }
    var HTMLCcInputElement: {
        prototype: HTMLCcInputElement;
        new (): HTMLCcInputElement;
    };
    interface HTMLCcLiElement extends Components.CcLi, HTMLStencilElement {
    }
    var HTMLCcLiElement: {
        prototype: HTMLCcLiElement;
        new (): HTMLCcLiElement;
    };
    interface HTMLCcModalElementEventMap {
        "closeModal": void;
    }
    interface HTMLCcModalElement extends Components.CcModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCcModalElementEventMap>(type: K, listener: (this: HTMLCcModalElement, ev: CcModalCustomEvent<HTMLCcModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCcModalElementEventMap>(type: K, listener: (this: HTMLCcModalElement, ev: CcModalCustomEvent<HTMLCcModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCcModalElement: {
        prototype: HTMLCcModalElement;
        new (): HTMLCcModalElement;
    };
    interface HTMLCcTooltipElement extends Components.CcTooltip, HTMLStencilElement {
    }
    var HTMLCcTooltipElement: {
        prototype: HTMLCcTooltipElement;
        new (): HTMLCcTooltipElement;
    };
    interface HTMLCcUlElement extends Components.CcUl, HTMLStencilElement {
    }
    var HTMLCcUlElement: {
        prototype: HTMLCcUlElement;
        new (): HTMLCcUlElement;
    };
    interface HTMLElementTagNameMap {
        "cc-input": HTMLCcInputElement;
        "cc-li": HTMLCcLiElement;
        "cc-modal": HTMLCcModalElement;
        "cc-tooltip": HTMLCcTooltipElement;
        "cc-ul": HTMLCcUlElement;
    }
}
declare namespace LocalJSX {
    interface CcInput {
    }
    interface CcLi {
    }
    interface CcModal {
        "isOpen"?: boolean;
        "onCloseModal"?: (event: CcModalCustomEvent<void>) => void;
    }
    interface CcTooltip {
        "text"?: string;
    }
    interface CcUl {
    }
    interface IntrinsicElements {
        "cc-input": CcInput;
        "cc-li": CcLi;
        "cc-modal": CcModal;
        "cc-tooltip": CcTooltip;
        "cc-ul": CcUl;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cc-input": LocalJSX.CcInput & JSXBase.HTMLAttributes<HTMLCcInputElement>;
            "cc-li": LocalJSX.CcLi & JSXBase.HTMLAttributes<HTMLCcLiElement>;
            "cc-modal": LocalJSX.CcModal & JSXBase.HTMLAttributes<HTMLCcModalElement>;
            "cc-tooltip": LocalJSX.CcTooltip & JSXBase.HTMLAttributes<HTMLCcTooltipElement>;
            "cc-ul": LocalJSX.CcUl & JSXBase.HTMLAttributes<HTMLCcUlElement>;
        }
    }
}
